require 'structle'

- # TODO: Partial loading.
- def partial_struct(type)
  class #{type type.name} < Structle::Struct
    - type.members.each do |member|
      - if [:bool, :bytes, :float, :double, :uint8, :uint16, :uint32, :uint64, :int8, :int16, :int32, :int64, :string].include? member.type
        field :#{variable member.name}, #{member.pack.dump}, #{member.size}
      - else
        field :#{variable member.name}, #{member.pack.dump}, #{member.size}, type: #{type member.type.name}
      -end
    -end
  end

- end
- # TODO: Partial loading.
- def partial_package(pkg)
  - if pkg.name
    module #{type pkg.name}
  - end
  - pkg.members.each do |member|
    - case member
      - when Structle::Def::Package then partial_package(member)
      - when Structle::Def::Struct  then partial_struct(member)
    - end
  - end
  - if pkg.name
    end # #{type pkg.name}
  - end
- end
- partial_package data
