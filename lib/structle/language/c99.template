#pragma once

#ifdef __cplusplus
  extern "C" {
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

#define #{constant data.structs.first.namespace, :types} \\
  - data.structs.each do |type|
    X(#{constant type.namespace, type.name}, #{variable type.namespace, type.name}) #{type == data.structs.last ? '' : '\\'}
  - end

#define X(constant, name) constant,
typedef enum #{type data.structs.first.namespace, :types} {
  = constant data.structs.first.namespace, :types
} #{type data.structs.first.namespace, :types};
#undef X

- data.types.each do |type|
  - case type
  - when Structle::Def::Struct
    #pragma pack(push, 1)
    typedef struct #{type type.namespace, type.name} {
      - type.members.each do |member|
        - case member.type
        - when :bytes, :string
          uint8_t  #{variable member.name}[#{member.size}];
        - when :bool
          bool     #{variable member.name};
        - when :float
          float    #{variable member.name};
        - when :double
          double   #{variable member.name};
        - when :uint8
          uint8_t  #{variable member.name};
        - when :uint16
          uint16_t #{variable member.name};
        - when :uint32
          uint32_t #{variable member.name};
        - when :uint64
          uint64_t #{variable member.name};
        - when :int8
          int8_t   #{variable member.name};
        - when :int16
          int16_t  #{variable member.name};
        - when :int32
          int32_t  #{variable member.name};
        - when :int64
          int64_t  #{variable member.name};
        - else
          #{type member.namespace, member.type.name} #{variable member.name};
        - end
      - end
    } #{type type.namespace, type.name};
    #pragma pack(pop)

  - end
- end
#ifdef __cplusplus
  }
#endif
