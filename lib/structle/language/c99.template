#pragma once

#ifdef __cplusplus
  extern "C" {
#endif

// Generated code!

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

- def field_type name, type
  - if type    < Structle::Bytes
      uint8_t  #{variable name}[#{type.size}];
  - elsif type < Structle::String
      uint8_t  #{variable name}[#{type.size}];
  - elsif type < Structle::Binary
      struct {
        uint8_t data[#{type.__size}];
        #{type.__size <= 0xFF ? "uint8_t" : type.__size <= 0xFFFF ? "uint16_t" : "uint32_t"} size;
      } #{variable name};
  - elsif type < Structle::Bool
      bool     #{variable name};
  - elsif type < Structle::Float
      float    #{variable name};
  - elsif type < Structle::Double
      double   #{variable name};
  - elsif type < Structle::Uint8
      uint8_t  #{variable name};
  - elsif type < Structle::Uint16
      uint16_t #{variable name};
  - elsif type < Structle::Uint32
      uint32_t #{variable name};
  - elsif type < Structle::Uint64
      uint64_t #{variable name};
  - elsif type < Structle::Int8
      int8_t   #{variable name};
  - elsif type < Structle::Int16
      int16_t  #{variable name};
  - elsif type < Structle::Int32
      int32_t  #{variable name};
  - elsif type < Structle::Int64
      int64_t  #{variable name};
  - elsif type < Structle::Enum
    - field_type name, type.type
  - elsif type < Structle::Struct
      #{type type.name} #{variable name};
  - end
- end
-
- Structle.namespaces.each do |ns|
/*
    = variable ns
*/

  - Structle.enums(ns).each do |enum|
    typedef enum #{type enum.name} {
      - enum.values.each do |k, v|
        #{constant k} = #{v},
      - end
    } #{type enum.name};

  - end
  - structs = Structle.structs(ns).select(&:complete?)
  - unless structs.empty?
    #define #{constant ns, :types} \\
      - structs.each do |struct|
        X(#{constant struct.name}, #{variable struct.name}, #{struct.fields.size})#{struct == structs.last ? '' : ' \\'}
      - end

    #pragma pack(push, 1)
    - structs.each do |struct|
      typedef struct #{type struct.name} {
        - struct.fields.each do |name, type|
          - field_type name, type
        - end
      } #{type struct.name};#{structs.last == struct ? '' : "\n"}
    - end
    #pragma pack(pop)
  - end

- end
#ifdef __cplusplus
  }
#endif
